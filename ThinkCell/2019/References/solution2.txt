#include <assert.h>
#include <map>
#include <limits>
#include <iostream>
 
 
template <class K, class V>
class interval_map {
    friend void IntervalMapTest();
 
 
private:
    std::map<K, V> m_map;
 
public:
    typedef typename std::map <K, V>::iterator  mapIter;
    // constructor associates whole range of K with val by inserting (K_min, val)
    // into the map
    interval_map( V const& val)
    {
        m_map.insert(m_map.begin(), std::make_pair(std::numeric_limits<K>::lowest(), val));
    };
 
    void printAll ()
    {
        for(auto const& mapValue : m_map)
        {
            std::cout << mapValue.first << " -> " << mapValue.second << std::endl;
        }
    }

	//erase all smaller elements between begin and end of interval
    void eraseUntillEnd(mapIter beginIter , mapIter endIter)
    {
		if(beginIter++ != endIter)
			m_map.erase(beginIter, endIter);
    }
 
	//in case of equality it will merge the
	//given interval with the previous one
    void mergeHead(mapIter beginIter, const V& val )
    {
        beginIter->second = val;
        if (beginIter != m_map.begin())
        {
            auto preBeginIter = beginIter;
            --preBeginIter;
            if (beginIter->second == preBeginIter->second)
            {
                m_map.erase(beginIter);
            }
        }
    }
 
	//in case of equality it will merge the
	//given interval with the next one
    void mergeTail(mapIter endIter)
    {
        auto nextEndIter = endIter ;
        if (++nextEndIter != m_map.end())
        {
            if (endIter->second == nextEndIter->second)
                m_map.erase(endIter);
        }
    }
 
    // Assign value val to interval [keyBegin, keyEnd).
    // Overwrite previous values in this interval.
    // Do not change values outside this interval.
    // Conforming to the C++ Standard Library conventions, the interval
    // includes keyBegin, but excludes keyEnd.
    // If !( keyBegin < keyEnd ), this designates an empty interval,
    // and assign must do nothing.
    void assign( K const& keyBegin, K const& keyEnd, const V& val )
    {
        mapIter beginIter = m_map.find(keyBegin);
        mapIter endIter = m_map.find(keyEnd);
 
		if (keyBegin < keyEnd)
		{
			// KeyBegin does not already exists in the m_map,
			// keyEnd does already exists in the m_map,
			if (beginIter == m_map.end() && endIter != m_map.end())
			{
				beginIter = m_map.insert(m_map.begin(), std::make_pair(keyBegin, val));
			}

			// KeyBegin does already exists in the m_map,
			// keyEnd does not already exists in the m_map,
			else if (beginIter != m_map.end() && endIter == m_map.end())
			{
				endIter = m_map.insert(m_map.begin(), std::make_pair(keyEnd, val));
				auto preEndIter = endIter;
				--preEndIter;
				endIter->second = preEndIter->second;
			}
			
			// KeyBegin does not already exists in the m_map,
			// keyEnd does not already exists in the m_map,
			else if (beginIter == m_map.end() && endIter == m_map.end())
			{
				beginIter = m_map.insert(m_map.begin(), std::make_pair(keyBegin, val));
				endIter = m_map.insert(m_map.begin(), std::make_pair(keyEnd, val));
				auto preEndIter = endIter;
				--preEndIter;
				if(preEndIter == beginIter)
					--preEndIter;
				endIter->second = preEndIter->second;
			}
 
            eraseUntillEnd(beginIter, endIter);
 
            mergeHead(beginIter, val);
 
            mergeTail(endIter);
		}

		else
		{
			//do nothing
		}
    }
 
    // look-up of the value associated with key
    V const& operator[]( K const& key ) const {
        return ( --m_map.upper_bound(key) )->second;
    }
};
 
// Many solutions we receive are incorrect. Consider using a randomized test
// to discover the cases that your implementation does not handle correctly.
// We recommend to implement a function IntervalMapTest() here that tests the
// functionality of the interval_map, for example using a map of unsigned int
// intervals to char.
 
void IntervalMapTest()
{
    interval_map <unsigned int, char > test('a');
    test.assign(2, 4, 'b');
    test.assign(4, 6, 'c');
    test.assign(6, 8, 'd');
    test.assign(0, 2, 'e');
    test.assign(2, 4, 'f');
    test.assign(4, 6, 'g');
	test.assign(6, 8, 'h');
    test.printAll();
}
 
int main(int argc, char* argv[])
{
    IntervalMapTest();
    return 0;
}